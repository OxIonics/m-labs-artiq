[tool.poetry]
name = "artiq"
version = "7.0"
description = "Advanced Real-Time Infrastructure for Quantum physics"
authors = ["M-Labs"]
license = "GPL v3"
include = [
    "artiq/gui/logo*.svg",
    "versioneer.py",
    "artiq/_version.py",
    "artiq/coredevice/coredevice_generic.schema.json",
    "artiq/compiler/kernel.ld",
    "artiq/firmware",
    "artiq/examples",
]

[[tool.poetry.source]]
name = "oxionics"
url = "http://pypi.oxionics.com:3141/oiuser/oxionics/+simple/"
default = true

[tool.poetry.scripts]
artiq_client = "artiq.frontend.artiq_client:main"
artiq_compile = "artiq.frontend.artiq_compile:main"
artiq_coreanalyzer = "artiq.frontend.artiq_coreanalyzer:main"
artiq_coremgmt = "artiq.frontend.artiq_coremgmt:main"
artiq_ddb_template = "artiq.frontend.artiq_ddb_template:main"
artiq_master = "artiq.frontend.artiq_master:main"
artiq_mkfs = "artiq.frontend.artiq_mkfs:main"
artiq_rtiomon = "artiq.frontend.artiq_rtiomon:main"
artiq_sinara_tester = "artiq.frontend.artiq_sinara_tester:main"
artiq_session = "artiq.frontend.artiq_session:main"
artiq_route = "artiq.frontend.artiq_route:main"
artiq_run = "artiq.frontend.artiq_run:main"
artiq_flash = "artiq.frontend.artiq_flash:main"
aqctl_corelog = "artiq.frontend.aqctl_corelog:main"
artiq_browser = "artiq.frontend.artiq_browser:main"
artiq_dashboard = "artiq.frontend.artiq_dashboard:main"
artiq_worker_manager = "artiq.frontend.artiq_worker_manager:main"

[tool.poetry.dependencies]
python = "~3.8"
numpy = "^1.21.4"
scipy = "^1.7.3"
python-dateutil = "^2.8.2"
prettytable = "^2.4.0"
h5py = "^3.6.0"
qasync = { version = "^0.22.0", optional = true }
pyqtgraph = { version = "^0.12.3", optional = true }
pygit2 = { version = "^1.7.1", optional = true }
pythonparser = { version = "^1.3", optional = true }
python-levenshtein = { version = "^0.12.2", optional = true }
pyqt5 = { version = "^5.15", optional = true }
migen = { version = "^0.9.2", optional = true }
misoc = { version = "^0.12.186", optional = true }
jsonschema = "^4.2.1"
sipyco = "^1.2"
llvmlite = { version = "^0.38.0", optional = true }
pyqt5-qt5 = { version = "^5.15.2", optional = true }
pyqt5-sip = { version = "^12.9.0", optional = true }
paramiko = { version = "^2.9.2", optional = true }
sphinx = {version = "^4.3.2", optional = true}
sphinx-rtd-theme = {version = "^1.0.0", optional = true}
sphinx-argparse = {version = "^0.3.1", optional = true}
sphinxcontrib-wavedrom = {version = "^3.0.2", optional = true}
opentelemetry-api = "^1.11.0"

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
pytest-asyncio = "^0.18.1"
lit = "^14.0.0"
outputcheck = "^0.4.1"
flake8 = "^4.0.1"
pyqt5-stubs = "^5.15.2"
# poetry-dynamic-versioning is installed so that we can generate dev version numbers
# when versioning the published wheels it needs to be installed in poetry's virtualenv
poetry-dynamic-versioning = "^0.14.1"
# comment about poetry-dynamic-versioning applies to path_version too
path_version = "^0.1"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
# number of commits since the root commit. 7579 is the number of commits before
# the 7.0 tag -- this brings us in line with artiq.
format-jinja = "{{ base.split('.')[0] }}.{{ distance + 7579 }}+g{{ commit }}.fw{{ get_last_change_hash('artiq/firmware') }}{%if dirty %}.dirty{% endif %}"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja-imports = [
    { module = "path_version", item = "get_last_change_hash" },
]

[tool.poetry-dynamic-versioning.substitution]
patterns = ["(^__version__\\s*(?::.*?)?=\\sf?['\"])[^'\"]*(['\"])"]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
# The remote-flashing extra is needed to run artiq_flash with the --host argument
remote-flashing = ["paramiko"]
# The build-docs feature is needed to run make html in docs/manual
build-docs = ["sphinx", "sphinx_rtd_theme", "sphinx-argparse", "sphinxcontrib-wavedrom"]
# The artiq-master extra is needed to run artiq_master or artiq_run
# Maybe also the kasli and kali_generic build scripts
artiq-master = ["pygit2", "pythonparser", "python-levenshtein", "migen", "misoc", "llvmlite"]
# Needed for running ARTIQ dashboard
gui = ["pyqt5", "pyqt5-qt5", "pyqt5-sip", "pyqtgraph", "qasync"]

[tool.poe.tasks]
lit-prep = "rustc artiq/test/libartiq_support/lib.rs -Cpanic=unwind -g"
[tool.poe.tasks.lit]
shell = "LIBARTIQ_SUPPORT=$POE_ROOT/libartiq_support.so lit -v $path"
[tool.poe.tasks.lit.args.path]
positional = true
default = "artiq/test/lit"
